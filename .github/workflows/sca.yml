#name: Verademo-ABS
#
#on: [push]
#
#jobs:
#  abs-opensource-scan:
#
#    runs-on: ubuntu-latest
#
#    steps:
#    - uses: actions/checkout@v2
#    - name: Set up JDK 1.8
#      uses: actions/setup-java@v1
#      with:
#        java-version: 1.8
#  
#    - name: Build with Maven
#      run: mvn clean verify
#    - name: Download the Agent Based SCA Scanner
#      env: # Set the secret as an input
#        SRCCLR_API_TOKEN: ${{ secrets.SRCCLR_API_TOKEN }}
#        SRCCLR_SCM_TYPE: GITHUB
#        SRCCLR_SCM_TOKEN: ${{ secrets.SCM_GITHUB }} 
#        SRCCLR_PR_ON: medium
#        SRCCLR_NO_BREAKING_UPDATES: true
#        SRCCLR_IGNORE_CLOSED_PRS: true
#        SRCCLR_SCM_URL: https://github.com/christyson/Verademo-master
#        EXTRA_ARGS: '--update-advisor --pull-request'
#      run: |
#        git config --global user.email "christyson@users.noreply.github.com"
#        git config --global user.name "Chris Tyson"
#        curl -sSL https://download.sourceclear.com/ci.sh | sh -s -- scan $EXTRA_ARGS > veracode-sca-results.txt
#        
#    - name: Check for existing Vulnerabilities
#      id: check-vulnerabilities
#      run: |
#          cat veracode-sca-results.txt
#          TEMP_VULN_EXISTS=$(grep 'Risk Vulnerabilities' veracode-sca-results.txt | awk '{sums += $4} END { test = (sums>0); print test}')
#          TEMP_VULN_SUM=$(grep 'Risk Vulnerabilities' veracode-sca-results.txt | awk '{sums += $4} END { print sums}')
#          echo ::set-output name=fail::$TEMP_VULN_EXISTS
#          echo ::set-output name=sums::$TEMP_VULN_SUM
#    - name: SCA Pass
#      if: ${{ steps.check-vulnerabilities.outputs.fail == 1 }}
#      uses: actions/github-script@v3
#      env:
#        VULN_NUM: ${{ steps.check-vulnerabilities.outputs.sums }}
#      with:
#        script: |
#          console.log(process.env.VULN_NUM);
#          core.setFailed(`Found ${process.env.VULN_NUM} Risk Vulnerabilities in your open source libraries`);
name: Veracode SCA Scan
#
on: [push]
#on: 
#  push:
#    paths-ignore:
#      - "README.md"
#  schedule:
#    - cron: 15 14 * * 6

jobs:
  veracode-sca-task:
    runs-on: ubuntu-latest
    name: Scan repository for Issues

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/setup-java@v1 # Make java accessible on path so the uploadandscan action can run.
        with: 
          java-version: '8'

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - uses: actions/upload-artifact@v4 # Copy files from repository to docker container so the next uploadandscan action can access them.
        with:
          path: '**/*.war' # Wildcards can be used to filter the files copied into the container. See: https://github.com/actions/upload-artifact
      - name: Veracode Software Composition Analysis
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SRCCLR_API_TOKEN }}
 #       run: |
 #        curl -sSL https://download.sourceclear.com/ci.sh | sh -s -- scan --debug --allow-dirty
        uses: veracode/veracode-sca@v2.1.12
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          quick: false
          debug: false
          create-issues: true 
#         path: '**/*.war'
